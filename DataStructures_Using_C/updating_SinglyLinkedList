//this c program is for changing/updating the value of node via two methods i.e 1.Position-wise 2.Value-wise
#include<stdio.h>
#include<stdlib.h>//for using dynamic memory allocation via malloc and exit function

//defining structure for node
struct node
{
    int data;//it will hold value of a node
    struct node *next;//it will hold pointer to next node
};

//global declaration and definition of head node
struct node *head=NULL;

//assuming insertion at last
void insert(int value)
{
    struct node *new,*ptr;
    new=(struct node *)malloc(sizeof(struct node));
    new->data=value;
    new->next=NULL;
    if(head==NULL)
        head=new;
    else
        {
            ptr=head;
           while(ptr->next!=NULL)
            ptr=ptr->next;
           ptr->next=new;

    }

}

//printing list
void print()
{
    struct node *ptr;
    ptr=head;
    if(head==NULL)
        printf("List is empty\n");
    else{
        while(ptr!=NULL)
        {
           printf("%d\t",ptr->data);
           ptr=ptr->next;
        }

    }
}

//updating list value-wise i.e it will change value of node when first num is observed
void updationV(int num,int value)//num is number which when observed will be changed or overwritten by value
{
    struct node *ptr;
    ptr=head;
    while(ptr!=NULL)
    {
        if(ptr->data==num)
            break;
        ptr=ptr->next;
    }
    if(ptr==NULL)
        printf("Number not found\n");
    else
    {
         ptr->data=value;
    printf("Success\n");
    }



}

//updating list position-wise i.e it will change the value at position by new value
void updationP(int position,int value)
{
    int count=0;
    struct node *ptr=head;
    while(ptr!=NULL)
    {
        count++;
        ptr=ptr->next;

    }
    if(count<position)
        printf("position does not exist\n");
    else
        {
            ptr=head;
         while(--position)
         ptr=ptr->next;
         ptr->data=value;
         printf("Success\n");


        }


}
//menu driven main function where all these functions will be called
int main()
{
     int choice,value,position,num;
    while(1)
    {
        printf("Enter 1.inserting a node 2.Change/Update value position-wise 3.Change/Update value value-wise 4.printing list 5.Exit\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: scanf("%d",&value);
                    insert(value);
                    break;
            case 2:printf("Enter position\n");
                   scanf("%d",&position);
                   printf("Enter value\n");
                   scanf("%d",&value);
                   updationP(position,value);
                   break;
            case 3:printf("enter value to be replaced\n");
                   scanf("%d",&num);
                   printf("enter new value\n");
                   scanf("%d",&value);
                   updationV(num,value);//because inserting at n position means insertion after n-1 position
                   break;
            case 4: print();
            break;
            case 5:exit(0);
            break;
            default:printf("Invalid entry\n");
        }


    }


}




